{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amato\\\\OneDrive\\\\Desktop\\\\MIT XPRO\\\\restaurant_capstone\\\\components\\\\restaurantList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport Router from 'next/router';\nimport AppContext from \"./context\";\nimport RestaurantPage from './restaurantPage';\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  _s();\n\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart,\n    user\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const activeUser = user.activeUser;\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, \"Not found\"); // console.log(`Query Data: ${JSON.stringify(data.restaurants)}`)\n\n  let searchQuery = data.restaurants.filter(res => {\n    return res.name.toLowerCase().includes(props.search);\n  });\n\n  if (searchQuery.length === 0) {\n    return __jsx(\"div\", {\n      style: {\n        color: \"red\",\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }\n    }, `No restaurants found, try refining your search.`);\n  }\n\n  ;\n  let restId = searchQuery[0].id; // definet renderer for Dishes\n\n  const renderDishes = restaurantID => {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, \" \");\n  };\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337` + res.image.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      id: res.name,\n      color: \"info\",\n      disabled: !activeUser,\n      onClick: () => Router.push(`/dishes/${res.name}`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, res.name)))));\n    return __jsx(React.Fragment, null, __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }\n    }, renderDishes(restaurantID))), __jsx(RestaurantPage, {\n      name: restaurantID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }\n    }));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 10\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\n_s(RestaurantList, \"vSa8LMF71aaYXu2cay25+xCoLgA=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\nexport default RestaurantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["C:/Users/amato/OneDrive/Desktop/MIT XPRO/restaurant_capstone/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","Router","AppContext","RestaurantPage","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","user","state","setState","activeUser","GET_RESTAURANTS","loading","error","data","searchQuery","restaurants","filter","res","name","toLowerCase","includes","search","length","color","fontWeight","restId","id","renderDishes","restList","map","margin","height","image","url","description","push"],"mappings":"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","sourcesContent":["import {gql,useQuery} from '@apollo/client';\nimport Dishes from \"./dishes\"\nimport {useContext, useState} from 'react';\nimport Router from 'next/router';\nimport AppContext from \"./context\";\nimport RestaurantPage from './restaurantPage';\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const[restaurantID, setRestaurantID] = useState(0)\n  const {cart, user } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const activeUser = user.activeUser;\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS)\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n // console.log(`Query Data: ${JSON.stringify(data.restaurants)}`)\n\n\nlet searchQuery = data.restaurants.filter((res) =>{\n    return res.name.toLowerCase().includes(props.search)\n  });\n\n  if(searchQuery.length === 0) {\n    return <div style={{color: \"red\", fontWeight:'bold'}}>{`No restaurants found, try refining your search.`}</div>\n  };\n\nlet restId = searchQuery[0].id;\n \n// definet renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    return (<Dishes restId={restaurantID}> </Dishes>)\n  };\nif(searchQuery.length > 0){\n  const restList = searchQuery.map((res) => (\n    <Col xs=\"6\" sm=\"4\" key={res.id}>\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n        <CardImg\n          top={true}\n          style={{ height: 200 }}\n          src={\n          `http://localhost:1337`+ res.image.url\n          }\n        />\n        <CardBody>\n          <CardText>{res.description}</CardText>\n        </CardBody>\n        <div className=\"card-footer\">\n        \n        <Button id={res.name} color=\"info\" disabled={!activeUser} onClick={()=> Router.push(`/dishes/${res.name}`)} \n         >{res.name}</Button>\n        {/* onClick={()=> setRestaurantID(res.id)} */}\n        </div>\n      </Card>\n    </Col>\n  ))\n\n  return(<>\n    <Container>\n    <Row xs='3'>\n      {restList}\n    </Row>\n    <Row xs='3'>\n    {renderDishes(restaurantID)}\n    </Row>\n    </Container>\n    <RestaurantPage name={restaurantID}/>\n  </>)\n} else {\n  return <h1> No Restaurants Found</h1>\n}\n}\n   export default RestaurantList"]},"metadata":{},"sourceType":"module"}